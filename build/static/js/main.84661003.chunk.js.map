{"version":3,"sources":["utils/redux.js","redux/app/actions.js","redux/app/reducer.js","redux/reducers.js","redux/app/saga.js","redux/sagas.js","redux/store.js","constants/routes.js","routes/RestrictedRoutes.js","pages/Root/Root.style.js","pages/Root/Root.js","pages/App/App.js","reportWebVitals.js","index.js"],"names":["ReduxUtils","type","argNames","args","action","length","payload","forEach","arg","index","name","prefix","makeActionCreator","TYPES","USER_AUTH_CHECK","USER_AUTH_REFRESH","appActions","userAuthCheck","userAuthRefresh","initState","Immutable","from","isLoggedIn","reducers","App","state","actions","set","appSaga","put","all","takeLatest","rootSaga","fork","history","createBrowserHistory","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","combineReducers","router","connectRouter","applyMiddleware","run","routes","LandingHome","lazy","catch","window","location","reload","RestrictedRoutes","fallback","exact","path","render","props","RoutesContainer","styled","main","Root","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"iQAAMA,E,+GAqBuBC,GAAoB,IAAD,uBAAVC,EAAU,iCAAVA,EAAU,kBAE1C,OAAO,WAAoB,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBAExB,IAAMC,EAAS,CAAEH,QAEjB,GAAIC,EAASG,OAAS,EAAG,CACvB,IAAMC,EAAU,GAChBJ,EAASK,SAAQ,SAACC,EAAKC,GACrB,IAAMC,EAAOR,EAASO,GACtBH,EAAQI,GAAQP,EAAKM,MAGvBL,EAAOE,QAAUA,EAGnB,OAAOF,O,KCnCTO,EAAS,QACPC,EAAsBZ,EAAtBY,kBAEFC,EAAQ,CACZC,gBAAgB,GAAD,OAAKH,EAAL,oBACfI,kBAAkB,GAAD,OAAKJ,EAAL,uBAGNK,EAAU,2BAClBH,GADkB,IAErBI,cAAeL,EAAkBC,EAAMC,iBACvCI,gBAAiBN,EAAkBC,EAAME,qBCTrCI,EAAYC,IAAUC,KAAK,CAC/BC,YAAY,ICEd,IAIeC,EAJE,CACfC,IDAa,WAA2D,IAAvCC,EAAsC,uDAA9BN,EAA8B,yCAAjBlB,EAAiB,EAAjBA,KACtD,OADuE,EAAXK,QACpDL,GACN,KAAKyB,EAAQX,kBACX,OAAOK,IAAUO,IAAIF,EAAO,cAAc,GAE5C,QACE,OAAOA,K,oCEXHR,G,WAQeW,GARzB,SAAUX,IAAV,iEAKC,OALD,SAKOY,YAAIb,EAAWE,mBALtB,uCAQe,SAAUU,IAAV,iEACb,OADa,SACPE,YAAI,CACRC,YAAWf,EAAWF,gBAAiBG,KAF5B,uC,eCFUe,GAAV,SAAUA,IAAV,iEACb,OADa,SACPF,YAAI,CACRG,YAAKL,KAFM,uCCAf,IAAMM,EAAUC,cACVC,EAAiBC,cAEjBC,EAAc,CAACF,EADGG,YAAiBL,IAGnCM,EAAmBC,8BAAoB,CAC3C/B,KAAM,YACNgC,OAAO,EACPC,WAAY,KAGRC,EAAQC,sBACZC,0BAAgB,2BACXvB,GADU,IAEbwB,OAAQC,YAAcd,MAExBM,EAAiBS,kBAAe,WAAf,EAAmBX,KAGtCF,EAAec,IAAIlB,G,kBC5BNmB,EACL,ICQFC,EAAcC,gBAAK,kBAAM,mDAA6BC,OAAM,WAHhEC,OAAOC,SAASC,eAKZC,EAAmB,WACvB,OACE,cAAC,WAAD,CAAUC,SAAU,wBAApB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMV,EAAaW,OAAQ,SAAAC,GAAK,OAAI,cAACX,EAAD,eAAiBW,Y,0GCbnE,IAAMC,E,MAAkBC,EAAOC,KAAV,KCGtBC,EAAO,WAEX,OACE,mCACE,qBAAKC,UAAU,mCAAf,SACE,cAACJ,EAAD,UACE,cAAC,EAAD,WCPJxC,EAAM,WACV,OACE,mCACE,cAAC,EAAD,OCKS6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMdQ,IAAShB,OACP,cAAC,IAAD,CAAUlB,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAiBV,QAASA,EAA1B,SACE,cAAC,EAAD,QAGJ6C,SAASC,eAAe,SAM1BX,M","file":"static/js/main.84661003.chunk.js","sourcesContent":["class ReduxUtils {\n\n    /**\n     * Makes action creator\n     * @param {String} type a type of action\n     * @param  {...String} argNames names of values which will be used as payload\n     * @returns {Function}\n     *\n     * Example:\n     * const addTodo = makeActionCreator('ADD_TODO', 'text');\n     * const action = addTodo('Learn Redux');\n     * console.log(action);\n     *\n     * Output:\n     * {\n     *    type: 'ADD_TODO',\n     *    payload: {\n     *      text: 'Learn Redux',\n     *    }\n     * }\n     */\n    static makeActionCreator(type, ...argNames) {\n  \n      return function (...args) {\n  \n        const action = { type };\n  \n        if (argNames.length > 0) {\n          const payload = {};\n          argNames.forEach((arg, index) => {\n            const name = argNames[index];\n            payload[name] = args[index];\n          });\n  \n          action.payload = payload;\n        }\n  \n        return action;\n      };\n    }\n  }\n  \n  export default ReduxUtils;\n  export { ReduxUtils };\n  ","import { ReduxUtils } from \"utils/redux\";\n\nconst prefix = \"[App]\";\nconst { makeActionCreator } = ReduxUtils;\n\nconst TYPES = {\n  USER_AUTH_CHECK: `${prefix} user-auth-check`,\n  USER_AUTH_REFRESH: `${prefix} user-auth-refresh`,\n};\n\nexport const appActions = {\n  ...TYPES,\n  userAuthCheck: makeActionCreator(TYPES.USER_AUTH_CHECK),\n  userAuthRefresh: makeActionCreator(TYPES.USER_AUTH_REFRESH),\n};\n","import Immutable from \"seamless-immutable\";\n\nimport { appActions as actions } from \"./actions\";\n\nconst initState = Immutable.from({\n  isLoggedIn: false,\n});\n\nexport default function appReducer(state = initState, { type, payload }) {\n  switch (type) {\n    case actions.USER_AUTH_REFRESH: {\n      return Immutable.set(state, \"isLoggedIn\", true);\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","/**\n * The lowest level of reducers.\n * Adhere alphabetical order for import and export sections of this file.\n */\n\nimport App from './app/reducer';\n\nconst reducers = {\n  App,\n};\n\nexport default reducers;\n","import { all, put, takeLatest } from 'redux-saga/effects';\nimport { appActions } from './actions';\n\nfunction* userAuthCheck() {\n\t// const result = yield call(AuthorsService.list);\n\t// if (!result) {\n\t// \treturn;\n\t// }\n\tyield put(appActions.userAuthRefresh());\n}\n\nexport default function* appSaga() {\n  yield all([\n    takeLatest(appActions.USER_AUTH_CHECK, userAuthCheck)\n  ]);\n}\n\nexport {\n  appSaga,\n}","/**\n * The lowest level of sagas.\n * Adhere alphabetical order for import and export sections of this file.\n */\n\nimport { all, fork } from 'redux-saga/effects';\n\nimport appSaga from './app/saga';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(appSaga),\n  ]);\n}\n","import createSagaMiddleware from \"redux-saga\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport reducers from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst history = createBrowserHistory();\nconst sagaMiddleware = createSagaMiddleware();\nconst routeMiddleware = routerMiddleware(history);\nconst middlewares = [sagaMiddleware, routeMiddleware];\n\nconst composeEnhancers = composeWithDevTools({\n  name: \"Augray QR\",\n  trace: true,\n  traceLimit: 20,\n});\n\nconst store = createStore(\n  combineReducers({\n    ...reducers,\n    router: connectRouter(history),\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport { store, history };\n","export const routes = {\n  home: \"/\",\n};\n","import React, { Suspense, lazy } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { routes } from \"constants/routes\";\n\nconst pageReload = () => {\n  window.location.reload();\n};\n\nconst LandingHome = lazy(() => import(\"pages/Landing/Home\").catch(() => pageReload()));\n\nconst RestrictedRoutes = () => {\n  return (\n    <Suspense fallback={<div />}>\n      <Switch>\n        <Route exact path={routes.home} render={props => <LandingHome {...props} />} />\n      </Switch>\n    </Suspense>\n  );\n};\n\nexport default RestrictedRoutes;\nexport { RestrictedRoutes };\n","import styled from \"styled-components\";\n\nexport const RoutesContainer = styled.main`background-repeat: no-repeat;`;\n","import React, { useState } from \"react\";\n\nimport { RestrictedRoutes } from \"routes\";\nimport { RoutesContainer } from \"./Root.style\";\n\nconst Root = () => {\n\n  return (\n    <>\n      <div className=\"leading-none relative text-black\">\n        <RoutesContainer>\n          <RestrictedRoutes />\n        </RoutesContainer>\n      </div>\n    </>\n  );\n};\n\nexport default Root;\nexport { Root };\n","import React from \"react\";\n\nimport { Root } from \"pages/Root\";\n\nconst App = () => {\n  return (\n    <>\n      <Root />\n    </>\n  );\n};\n\nexport default App;\nexport { App };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\n\nimport { store, history } from \"./redux/store\";\n\nimport \"./index.css\";\n\nimport { App } from \"./pages/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}